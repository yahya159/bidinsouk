// Prisma schema for MySQL mapping the marketplace with auctions, bids, orders,
// messaging, notifications, watchlists, reviews, abuse reports, audit logs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users and Roles
model User {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  email     String   @unique
  name      String
  password  String
  avatarUrl String?  @db.VarChar(512)
  phone     String?  @db.VarChar(32)
  locale    String?  @default("fr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role    @default(CLIENT)
  client Client?
  vendor Vendor?
  admin  Admin?

  notifications Notification[]
  messages      Message[]       @relation("UserMessages")
  threads       MessageThread[] @relation("UserThreads")
  abuseReports  AbuseReport[]   @relation("Reporter")
  auditLogs     AuditLog[]      @relation("Actor")
  archiveFiles  ArchiveFile[]
}

enum Role {
  CLIENT
  VENDOR
  ADMIN
}

// Client profile
model Client {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @unique @db.BigInt

  reviews       Review[]
  watchlist     WatchlistItem[]
  savedSearch   SavedSearch[]
  orders        Order[]
  bids          Bid[]
  threads       MessageThread[]
  orderRequests OrderRequest[]
}

// Vendor profile
model Vendor {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @unique @db.BigInt

  stores    Store[]
  auditLogs AuditLog[]      @relation("VendorAudit")
  threads   MessageThread[]
}

// Admin profile
model Admin {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @unique @db.BigInt
}

model Store {
  id        BigInt      @id @default(autoincrement()) @db.BigInt
  seller    Vendor      @relation(fields: [sellerId], references: [id])
  sellerId  BigInt      @db.BigInt
  name      String
  slug      String      @unique
  email     String
  phone     String?
  address   Json?
  socials   Json?
  seo       Json?
  status    StoreStatus @default(ACTIVE)
  createdAt DateTime    @default(now())

  products      Product[]
  auctions      Auction[]
  orders        Order[]
  orderRequests OrderRequest[]
}

enum StoreStatus {
  ACTIVE
  SUSPENDED
  PENDING
}

model Product {
  id        BigInt           @id @default(autoincrement()) @db.BigInt
  store     Store            @relation(fields: [storeId], references: [id])
  storeId   BigInt           @db.BigInt
  title     String
  brand     String?
  category  String?
  condition ProductCondition @default(USED)
  status    ProductStatus    @default(DRAFT)
  createdAt DateTime         @default(now())

  auctions       Auction[]
  offers         Offer[]
  reviews        Review[]
  watchlistItems WatchlistItem[]
}

enum ProductCondition {
  NEW
  USED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Auction {
  id           BigInt        @id @default(autoincrement()) @db.BigInt
  product      Product       @relation(fields: [productId], references: [id])
  productId    BigInt        @db.BigInt
  store        Store         @relation(fields: [storeId], references: [id])
  storeId      BigInt        @db.BigInt
  title        String
  minIncrement Decimal       @db.Decimal(12, 2)
  currentBid   Decimal       @default(0) @db.Decimal(12, 2)
  startPrice   Decimal       @db.Decimal(12, 2)
  reservePrice Decimal?      @db.Decimal(12, 2)
  startAt      DateTime      @default(now())
  endAt        DateTime
  status       AuctionStatus @default(SCHEDULED)

  bids Bid[]
}

enum AuctionStatus {
  SCHEDULED
  RUNNING
  ENDING_SOON
  ENDED
  ARCHIVED
}

model Bid {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId BigInt   @db.BigInt
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  BigInt   @db.BigInt
  amount    Decimal  @db.Decimal(12, 2)
  isAuto    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Offer {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt  @db.BigInt
  price     Decimal @db.Decimal(12, 2)
  promoPct  Int?
  active    Boolean @default(true)
}

model OrderRequest {
  id        BigInt             @id @default(autoincrement()) @db.BigInt
  user      Client             @relation(fields: [userId], references: [id])
  userId    BigInt             @db.BigInt
  store     Store              @relation(fields: [storeId], references: [id])
  storeId   BigInt             @db.BigInt
  source    OrderSource
  status    OrderRequestStatus @default(REQUESTED)
  expressAt DateTime?
  address   Json?
  notes     String?
  createdAt DateTime           @default(now())
}

enum OrderSource {
  BUY_NOW
  AUCTION_CLAIM
}

enum OrderRequestStatus {
  REQUESTED
  SELLER_ACCEPTED
  SELLER_REFUSED
  EXPIRED
  CONVERTED
}

model Order {
  id            BigInt        @id @default(autoincrement()) @db.BigInt
  user          Client        @relation(fields: [userId], references: [id])
  userId        BigInt        @db.BigInt
  store         Store         @relation(fields: [storeId], references: [id])
  storeId       BigInt        @db.BigInt
  number        String        @unique
  total         Decimal       @db.Decimal(12, 2)
  status        OrderStatus   @default(CONFIRMED)
  fulfillStatus FulfillStatus @default(PENDING)
  shipping      Json?
  timeline      Json?
  createdAt     DateTime      @default(now())
}

enum OrderStatus {
  CONFIRMED
  REFUSED
  CANCELED_AFTER_CONFIRM
}

enum FulfillStatus {
  PENDING
  PREPARING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELED
}

model MessageThread {
  id            BigInt     @id @default(autoincrement()) @db.BigInt
  type          ThreadType
  subject       String
  lastMessageAt DateTime?

  // Participants
  client   Client? @relation(fields: [clientId], references: [id])
  clientId BigInt? @db.BigInt
  vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId BigInt? @db.BigInt
  user     User    @relation("UserThreads", fields: [userId], references: [id])
  userId   BigInt  @db.BigInt

  messages Message[]
}

enum ThreadType {
  PRODUCT
  ORDER
  SUPPORT
}

model Message {
  id          BigInt        @id @default(autoincrement()) @db.BigInt
  thread      MessageThread @relation(fields: [threadId], references: [id])
  threadId    BigInt        @db.BigInt
  sender      User          @relation(name: "UserMessages", fields: [senderId], references: [id])
  senderId    BigInt        @db.BigInt
  bodyMd      String
  attachments Json?
  createdAt   DateTime      @default(now())
}

model Notification {
  id        BigInt           @id @default(autoincrement()) @db.BigInt
  user      User             @relation(fields: [userId], references: [id])
  userId    BigInt           @db.BigInt
  type      NotificationType
  title     String
  body      String
  payload   Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?
}

enum NotificationType {
  ORDER
  AUCTION
  MESSAGE
  SYSTEM
}

model WatchlistItem {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  BigInt   @db.BigInt
  product   Product  @relation(fields: [productId], references: [id])
  productId BigInt   @db.BigInt
  createdAt DateTime @default(now())

  @@unique([clientId, productId])
}

model Review {
  id        BigInt       @id @default(autoincrement()) @db.BigInt
  product   Product      @relation(fields: [productId], references: [id])
  productId BigInt       @db.BigInt
  client    Client       @relation(fields: [clientId], references: [id])
  clientId  BigInt       @db.BigInt
  rating    Int
  body      String
  photos    Json?
  verified  Boolean      @default(false)
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model AbuseReport {
  id         BigInt      @id @default(autoincrement()) @db.BigInt
  reporter   User        @relation(name: "Reporter", fields: [reporterId], references: [id])
  reporterId BigInt      @db.BigInt
  targetType String
  targetId   BigInt
  reason     String
  details    String?
  status     AbuseStatus @default(OPEN)
  createdAt  DateTime    @default(now())
}

enum AbuseStatus {
  OPEN
  REVIEWING
  RESOLVED
  REJECTED
}

model AuditLog {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  actor     User     @relation(name: "Actor", fields: [actorId], references: [id])
  actorId   BigInt   @db.BigInt
  vendor    Vendor?  @relation(name: "VendorAudit", fields: [vendorId], references: [id])
  vendorId  BigInt?  @db.BigInt
  entity    String
  entityId  BigInt
  diff      Json
  createdAt DateTime @default(now())
}

model ArchiveFile {
  id        BigInt        @id @default(autoincrement()) @db.BigInt
  owner     User          @relation(fields: [ownerId], references: [id])
  ownerId   BigInt        @db.BigInt
  fileName  String
  fileType  String
  size      Int
  path      String
  status    ArchiveStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
}

enum ArchiveStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Banner {
  id      BigInt @id @default(autoincrement()) @db.BigInt
  slot    String
  content Json
}

model SavedSearch {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  BigInt   @db.BigInt
  query     Json
  createdAt DateTime @default(now())
}
