
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  avatarUrl: 'avatarUrl',
  phone: 'phone',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  name: 'name',
  slug: 'slug',
  email: 'email',
  phone: 'phone',
  address: 'address',
  socials: 'socials',
  seo: 'seo',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  brand: 'brand',
  category: 'category',
  condition: 'condition',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AuctionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  storeId: 'storeId',
  title: 'title',
  minIncrement: 'minIncrement',
  currentBid: 'currentBid',
  startPrice: 'startPrice',
  reservePrice: 'reservePrice',
  startAt: 'startAt',
  endAt: 'endAt',
  status: 'status'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  clientId: 'clientId',
  amount: 'amount',
  isAuto: 'isAuto',
  createdAt: 'createdAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  promoPct: 'promoPct',
  active: 'active'
};

exports.Prisma.OrderRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  source: 'source',
  status: 'status',
  expressAt: 'expressAt',
  address: 'address',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  number: 'number',
  total: 'total',
  status: 'status',
  fulfillStatus: 'fulfillStatus',
  shipping: 'shipping',
  timeline: 'timeline',
  createdAt: 'createdAt'
};

exports.Prisma.MessageThreadScalarFieldEnum = {
  id: 'id',
  type: 'type',
  subject: 'subject',
  lastMessageAt: 'lastMessageAt',
  clientId: 'clientId',
  vendorId: 'vendorId',
  userId: 'userId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  senderId: 'senderId',
  bodyMd: 'bodyMd',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  payload: 'payload',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.WatchlistItemScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  clientId: 'clientId',
  rating: 'rating',
  body: 'body',
  photos: 'photos',
  verified: 'verified',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AbuseReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  targetType: 'targetType',
  targetId: 'targetId',
  reason: 'reason',
  details: 'details',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  vendorId: 'vendorId',
  entity: 'entity',
  entityId: 'entityId',
  diff: 'diff',
  createdAt: 'createdAt'
};

exports.Prisma.ArchiveFileScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  fileName: 'fileName',
  fileType: 'fileType',
  size: 'size',
  path: 'path',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  slot: 'slot',
  content: 'content'
};

exports.Prisma.SavedSearchScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  query: 'query',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  name: 'name',
  password: 'password',
  avatarUrl: 'avatarUrl',
  phone: 'phone',
  locale: 'locale'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.StoreOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  email: 'email',
  phone: 'phone'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  title: 'title',
  brand: 'brand',
  category: 'category'
};

exports.Prisma.AuctionOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.OrderRequestOrderByRelevanceFieldEnum = {
  notes: 'notes'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  number: 'number'
};

exports.Prisma.MessageThreadOrderByRelevanceFieldEnum = {
  subject: 'subject'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  bodyMd: 'bodyMd'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  body: 'body'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  body: 'body'
};

exports.Prisma.AbuseReportOrderByRelevanceFieldEnum = {
  targetType: 'targetType',
  reason: 'reason',
  details: 'details'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  entity: 'entity'
};

exports.Prisma.ArchiveFileOrderByRelevanceFieldEnum = {
  fileName: 'fileName',
  fileType: 'fileType',
  path: 'path'
};

exports.Prisma.BannerOrderByRelevanceFieldEnum = {
  slot: 'slot'
};
exports.Role = exports.$Enums.Role = {
  CLIENT: 'CLIENT',
  VENDOR: 'VENDOR',
  ADMIN: 'ADMIN'
};

exports.StoreStatus = exports.$Enums.StoreStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING'
};

exports.ProductCondition = exports.$Enums.ProductCondition = {
  NEW: 'NEW',
  USED: 'USED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.AuctionStatus = exports.$Enums.AuctionStatus = {
  SCHEDULED: 'SCHEDULED',
  RUNNING: 'RUNNING',
  ENDING_SOON: 'ENDING_SOON',
  ENDED: 'ENDED',
  ARCHIVED: 'ARCHIVED'
};

exports.OrderSource = exports.$Enums.OrderSource = {
  BUY_NOW: 'BUY_NOW',
  AUCTION_CLAIM: 'AUCTION_CLAIM'
};

exports.OrderRequestStatus = exports.$Enums.OrderRequestStatus = {
  REQUESTED: 'REQUESTED',
  SELLER_ACCEPTED: 'SELLER_ACCEPTED',
  SELLER_REFUSED: 'SELLER_REFUSED',
  EXPIRED: 'EXPIRED',
  CONVERTED: 'CONVERTED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CONFIRMED: 'CONFIRMED',
  REFUSED: 'REFUSED',
  CANCELED_AFTER_CONFIRM: 'CANCELED_AFTER_CONFIRM'
};

exports.FulfillStatus = exports.$Enums.FulfillStatus = {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  READY_FOR_PICKUP: 'READY_FOR_PICKUP',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELED: 'CANCELED'
};

exports.ThreadType = exports.$Enums.ThreadType = {
  PRODUCT: 'PRODUCT',
  ORDER: 'ORDER',
  SUPPORT: 'SUPPORT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER: 'ORDER',
  AUCTION: 'AUCTION',
  MESSAGE: 'MESSAGE',
  SYSTEM: 'SYSTEM'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.AbuseStatus = exports.$Enums.AbuseStatus = {
  OPEN: 'OPEN',
  REVIEWING: 'REVIEWING',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.ArchiveStatus = exports.$Enums.ArchiveStatus = {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Vendor: 'Vendor',
  Admin: 'Admin',
  Store: 'Store',
  Product: 'Product',
  Auction: 'Auction',
  Bid: 'Bid',
  Offer: 'Offer',
  OrderRequest: 'OrderRequest',
  Order: 'Order',
  MessageThread: 'MessageThread',
  Message: 'Message',
  Notification: 'Notification',
  WatchlistItem: 'WatchlistItem',
  Review: 'Review',
  AbuseReport: 'AbuseReport',
  AuditLog: 'AuditLog',
  ArchiveFile: 'ArchiveFile',
  Banner: 'Banner',
  SavedSearch: 'SavedSearch'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
