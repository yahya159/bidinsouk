// Prisma schema for MySQL mapping the marketplace with auctions, bids, orders,
// messaging, notifications, watchlists, reviews, abuse reports, audit logs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users and Roles
model User {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  email     String   @unique
  name      String
  password  String
  avatarUrl String?  @db.VarChar(512)
  phone     String?  @db.VarChar(32)
  locale    String?  @default("fr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @default(CLIENT)  // Primary role (backward compatibility)
  roles  Json?  // Array of roles ["CLIENT", "VENDOR"] for dual capabilities
  client Client?
  vendor Vendor?
  admin  Admin?

  notifications Notification[]
  messages      Message[]      @relation("UserMessages")
  threadParticipants MessageThreadParticipant[] @relation("ThreadParticipants")
  uploadedAttachments MessageAttachment[] @relation("UploadedAttachments")
  abuseReports  AbuseReport[]  @relation("Reporter")
  auditLogs     AuditLog[]     @relation("Actor")
  archiveFiles  ArchiveFile[]
  watchedAuctions AuctionWatcher[] @relation("WatchedAuctions")
}

enum Role {
  CLIENT
  VENDOR
  ADMIN
}

// Client profile
model Client {
  id         BigInt    @id @default(autoincrement()) @db.BigInt
  user       User      @relation(fields: [userId], references: [id])
  userId     BigInt    @unique @db.BigInt
  archivedAt DateTime? // Track if this client profile was archived during vendor upgrade

  reviews      Review[]
  watchlist    WatchlistItem[]
  savedSearch  SavedSearch[]
  orders       Order[]
  bids         Bid[]
  orderRequests OrderRequest[]
  wonAuctions  Auction[] @relation("AuctionWinner")
  cartItems    CartItem[]
}

// Vendor profile
model Vendor {
  id        BigInt @id @default(autoincrement()) @db.BigInt
  user      User   @relation(fields: [userId], references: [id])
  userId    BigInt @unique @db.BigInt

  // Business Information
  businessName          String?  @db.VarChar(255)
  businessDescription   String?  @db.Text
  businessType          String?  @db.VarChar(50) // INDIVIDUAL, COMPANY, PARTNERSHIP
  
  // Contact Information
  phoneNumber           String?  @db.VarChar(32)
  businessEmail         String?  @db.VarChar(255)
  businessAddress       Json?
  
  // Legal Information
  taxId                 String?  @db.VarChar(100)
  businessRegNumber     String?  @db.VarChar(100)
  
  // Banking (Encrypted)
  bankAccountNumber     String?  @db.VarChar(512)
  bankRoutingNumber     String?  @db.VarChar(512)
  bankAccountHolderName String?  @db.VarChar(255)
  
  // Status Management
  status                VendorStatus @default(PENDING)
  
  // Approval/Rejection
  approvedAt            DateTime?
  approvedBy            BigInt?      @db.BigInt
  rejectedAt            DateTime?
  rejectedBy            BigInt?      @db.BigInt
  rejectionReason       String?      @db.Text
  rejectionCategory     String?      @db.VarChar(50)
  
  // Suspension
  suspendedAt           DateTime?
  suspensionReason      String?      @db.Text
  reinstatedAt          DateTime?
  reinstatedBy          BigInt?      @db.BigInt
  
  // Documents
  documents             Json?        // URLs to uploaded documents
  documentsComplete     Boolean      @default(false)
  
  // Additional Info
  yearsInBusiness       Int?
  estimatedMonthlyVolume String?     @db.VarChar(50)
  productCategories     Json?
  
  // Metadata
  tier                  String       @default("BASIC") @db.VarChar(50) // BASIC, PREMIUM
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  stores    Store[]
  auditLogs AuditLog[] @relation("VendorAudit")
  messageThreads MessageThread[]
  settings  VendorSettings?
  
  @@index([status])
  @@index([businessName])
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  EXPIRED
}

// Admin profile
model Admin {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @unique @db.BigInt
}

model Store {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  seller    Vendor  @relation(fields: [sellerId], references: [id])
  sellerId  BigInt @db.BigInt
  name      String
  slug      String  @unique
  email     String
  phone     String?
  address   Json?
  socials   Json?
  seo       Json?
  logo      String?  @db.VarChar(512)
  banner    String?  @db.VarChar(512)
  description String? @db.Text
  status    StoreStatus @default(PENDING)
  
  // Approval tracking
  approvedAt      DateTime?
  approvedBy      BigInt?      @db.BigInt
  rejectedAt      DateTime?
  rejectionReason String?      @db.Text
  suspendedAt     DateTime?
  deletedAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  auctions Auction[]
  orders   Order[]
  orderRequests OrderRequest[]
  
  @@index([sellerId])
  @@index([status])
}

enum StoreStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
  DELETED
}

model Product {
  id        BigInt @id @default(autoincrement()) @db.BigInt
  store     Store  @relation(fields: [storeId], references: [id])
  storeId   BigInt @db.BigInt
  title     String
  description String? @db.Text
  brand     String?
  category  String?
  condition ProductCondition @default(USED)
  status    ProductStatus    @default(DRAFT)
  price     Decimal? @db.Decimal(12,2)
  compareAtPrice Decimal? @db.Decimal(12,2)
  sku       String?
  barcode   String?
  images    Json?
  tags      Json?
  seoData   Json?
  variants  Json?
  inventory Json?
  views     Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auctions Auction[]
  offers   Offer[]
  reviews  Review[]
  watchlistItems WatchlistItem[]
  messageThreads MessageThread[]
  productImages ProductImage[]
  cartItems CartItem[]
}

model CartItem {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  BigInt   @db.BigInt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId BigInt   @db.BigInt
  offer     Offer?   @relation(fields: [offerId], references: [id], onDelete: SetNull)
  offerId   BigInt?  @db.BigInt
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(12,2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([clientId, productId, offerId])
  @@index([clientId])
  @@index([productId])
}

enum ProductCondition {
  NEW
  USED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Auction {
  id            BigInt @id @default(autoincrement()) @db.BigInt
  product       Product? @relation(fields: [productId], references: [id])
  productId     BigInt?  @db.BigInt
  store         Store   @relation(fields: [storeId], references: [id])
  storeId       BigInt  @db.BigInt
  title         String
  description   String? @db.Text
  images        Json?
  category      String?
  minIncrement  Decimal @db.Decimal(12,2)
  currentBid    Decimal @default(0) @db.Decimal(12,2)
  startPrice    Decimal @db.Decimal(12,2)
  reservePrice  Decimal? @db.Decimal(12,2)
  reserveMet    Boolean @default(false)
  buyNowPrice   Decimal? @db.Decimal(12,2)
  startAt       DateTime @default(now())
  endAt         DateTime
  duration      Int? // hours
  autoExtend    Boolean @default(false)
  extendMinutes Int @default(5)
  extensionCount Int @default(0)
  lastExtendedAt DateTime?
  views         Int @default(0)
  watchers      Int @default(0)
  status        AuctionStatus @default(SCHEDULED)
  winnerId      BigInt? @db.BigInt
  winner        Client? @relation("AuctionWinner", fields: [winnerId], references: [id])
  winningBidId  BigInt? @db.BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bids          Bid[]
  activities    AuctionActivity[]
  auctionViews  AuctionView[]
  auctionWatchers AuctionWatcher[]
  
  @@index([status, endAt])
  @@index([winnerId])
}

enum AuctionStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  RUNNING
  ENDING_SOON
  ENDED
  CANCELLED
  ARCHIVED
}

model Bid {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  auction   Auction @relation(fields: [auctionId], references: [id])
  auctionId BigInt  @db.BigInt
  client    Client  @relation(fields: [clientId], references: [id])
  clientId  BigInt  @db.BigInt
  amount    Decimal @db.Decimal(12,2)
  maxAmount Decimal? @db.Decimal(12,2) // For proxy bidding
  isAuto    Boolean @default(false)
  isProxyBid Boolean @default(false) // True if auto-generated by proxy system
  proxyGeneratedBy BigInt? @db.BigInt // Original bid that triggered this
  status    BidStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  
  @@index([auctionId, amount(sort: Desc)])
  @@index([clientId, status])
  @@index([maxAmount])
}

enum BidStatus {
  ACTIVE    // Bid is still in play
  OUTBID    // Bid was beaten by another bidder
  WINNING   // Currently winning the auction
  WON       // Won the auction (auction ended)
  LOST      // Lost the auction (auction ended)
}

model Offer {
  id         BigInt @id @default(autoincrement()) @db.BigInt
  product    Product @relation(fields: [productId], references: [id])
  productId  BigInt  @db.BigInt
  price      Decimal @db.Decimal(12,2)
  promoPct   Int? 
  active     Boolean @default(true)
  cartItems  CartItem[]
}

model OrderRequest {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  user      Client   @relation(fields: [userId], references: [id])
  userId    BigInt   @db.BigInt
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   BigInt   @db.BigInt
  source    OrderSource
  status    OrderRequestStatus @default(REQUESTED)
  expressAt DateTime?
  address   Json?
  notes     String?
  createdAt DateTime @default(now())
}

enum OrderSource {
  BUY_NOW
  AUCTION_CLAIM
}

enum OrderRequestStatus {
  REQUESTED
  SELLER_ACCEPTED
  SELLER_REFUSED
  EXPIRED
  CONVERTED
}

model Order {
  id           BigInt @id @default(autoincrement()) @db.BigInt
  user         Client @relation(fields: [userId], references: [id])
  userId       BigInt @db.BigInt
  store        Store  @relation(fields: [storeId], references: [id])
  storeId      BigInt @db.BigInt
  number       String @unique
  total        Decimal @db.Decimal(12,2)
  status       OrderStatus @default(CONFIRMED)
  fulfillStatus FulfillStatus @default(PENDING)
  shipping     Json?
  timeline     Json?
  createdAt    DateTime @default(now())

  messageThreads MessageThread[]
}

enum OrderStatus {
  CONFIRMED
  REFUSED
  CANCELED_AFTER_CONFIRM
}

enum FulfillStatus {
  PENDING
  PREPARING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELED
}

model MessageThread {
  id            String  @id @default(cuid())
  type          ThreadType
  subject       String
  status        ThreadStatus @default(OPEN)
  priority      ThreadPriority @default(NORMAL)
  category      ThreadCategory?
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  vendorId   BigInt?
  vendor     Vendor? @relation(fields: [vendorId], references: [id])
  productId  BigInt?
  product    Product? @relation(fields: [productId], references: [id])
  orderId    BigInt?
  order      Order? @relation(fields: [orderId], references: [id])

  messages     Message[]
  participants MessageThreadParticipant[]
}

enum ThreadType {
  SUPPORT_TICKET
  VENDOR_CHAT
}

enum ThreadStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ThreadPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ThreadCategory {
  ORDER
  PRODUCT
  TECHNICAL
  OTHER
}

model MessageThreadParticipant {
  id       String @id @default(cuid())
  threadId String
  thread   MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userId   BigInt @db.BigInt
  user     User   @relation("ThreadParticipants", fields: [userId], references: [id])
  role     ParticipantRole @default(USER)
  joinedAt DateTime @default(now())

  @@unique([threadId, userId])
}

enum ParticipantRole {
  USER
  VENDOR
  ADMIN
}

model Message {
  id        String  @id @default(cuid())
  threadId  String
  thread    MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  senderId  BigInt  @db.BigInt
  sender    User    @relation("UserMessages", fields: [senderId], references: [id])
  content   String  @db.Text
  isRead    Boolean @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachments MessageAttachment[]
}

model MessageAttachment {
  id           String   @id @default(cuid())
  messageId    String?
  message      Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  filename     String
  originalName String
  url          String
  size         Int
  mimeType     String
  uploadedById BigInt   @db.BigInt
  uploadedBy   User     @relation("UploadedAttachments", fields: [uploadedById], references: [id])
  createdAt    DateTime @default(now())
}

model Notification {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt  @db.BigInt
  type      NotificationType
  title     String
  body      String
  payload   Json?
  createdAt DateTime @default(now())
  readAt    DateTime?
}

enum NotificationType {
  ORDER
  AUCTION
  MESSAGE
  SYSTEM
}

model WatchlistItem {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  client    Client  @relation(fields: [clientId], references: [id])
  clientId  BigInt  @db.BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt  @db.BigInt
  createdAt DateTime @default(now())

  @@unique([clientId, productId])
}

model Review {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt  @db.BigInt
  client    Client  @relation(fields: [clientId], references: [id])
  clientId  BigInt  @db.BigInt
  rating    Int
  body      String
  photos    Json?
  verified  Boolean @default(false)
  status    ReviewStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model AbuseReport {
  id         BigInt  @id @default(autoincrement()) @db.BigInt
  reporter   User    @relation(name: "Reporter", fields: [reporterId], references: [id])
  reporterId BigInt  @db.BigInt
  targetType String
  targetId   BigInt
  reason     String
  details    String?
  status     AbuseStatus @default(OPEN)
  createdAt  DateTime @default(now())
}

enum AbuseStatus {
  OPEN
  REVIEWING
  RESOLVED
  REJECTED
}

model AuditLog {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  actor      User     @relation(name: "Actor", fields: [actorId], references: [id])
  actorId    BigInt   @db.BigInt
  action     String   // Action type (e.g., "USER_CREATED", "PRODUCT_UPDATED")
  entity     String   // Entity type (e.g., "User", "Product")
  entityId   BigInt   // ID of the affected entity
  ipAddress  String?  @db.VarChar(45) // IPv4 or IPv6
  userAgent  String?  @db.Text
  metadata   Json?    // Additional context
  diff       Json?    // Before/after changes
  vendor     Vendor?  @relation(name: "VendorAudit", fields: [vendorId], references: [id])
  vendorId   BigInt?
  createdAt  DateTime @default(now())
  
  @@index([actorId])
  @@index([action])
  @@index([entity])
  @@index([ipAddress])
  @@index([createdAt])
}

model PlatformSettings {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  key       String   @unique
  value     Json
  category  String   // e.g., "auction", "user", "payment", "general"
  updatedBy BigInt   @db.BigInt
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  @@index([category])
}

model ArchiveFile {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   BigInt  @db.BigInt
  fileName  String
  fileType  String
  size      Int
  path      String
  status    ArchiveStatus @default(ACTIVE)
  createdAt DateTime @default(now())
}

enum ArchiveStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Banner {
  id      BigInt @id @default(autoincrement()) @db.BigInt
  slot    String
  content Json
}

model SavedSearch {
  id        BigInt  @id @default(autoincrement()) @db.BigInt
  client    Client  @relation(fields: [clientId], references: [id])
  clientId  BigInt  @db.BigInt
  query     Json
  createdAt DateTime @default(now())
}

model VendorSettings {
  id        BigInt @id @default(autoincrement()) @db.BigInt
  vendor    Vendor @relation(fields: [vendorId], references: [id])
  vendorId  BigInt @unique @db.BigInt
  storeSettings Json?
  accountSettings Json?
  notificationSettings Json?
  securitySettings Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuctionActivity {
  id           BigInt   @id @default(autoincrement()) @db.BigInt
  auction      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    BigInt   @db.BigInt
  activityType String   @db.VarChar(50)
  userId       BigInt   @db.BigInt
  metadata     Json?
  createdAt    DateTime @default(now())
  
  @@index([auctionId])
  @@index([userId])
}

model AuctionView {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId BigInt   @db.BigInt
  userId    BigInt?  @db.BigInt
  ipAddress String?  @db.VarChar(45)
  createdAt DateTime @default(now())
  
  @@index([auctionId])
  @@index([userId])
}

model AuctionWatcher {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId BigInt   @db.BigInt
  user      User     @relation("WatchedAuctions", fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt   @db.BigInt
  createdAt DateTime @default(now())
  
  @@unique([auctionId, userId])
  @@index([auctionId])
  @@index([userId])
}

model ProductImage {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId BigInt   @db.BigInt
  url       String   @db.VarChar(512)
  altText   String?  @db.VarChar(255)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  @@index([productId])
}
